name: 'Deploy Infrastructure'

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Name of the project'
        required: true
        default: 'doctolib-case-dataops'

env:
  PROJECT_NAME: ${{ github.event.inputs.project_name }}

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Step 1: Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Step 2: Set up Google Cloud credentials based on project name
    - name: Set up Google Cloud credentials
      id: setup_credentials
      run: |
          CREDENTIALS_GCP_NAME=$(echo "$PROJECT_NAME" | sed 's/-/_/g')
          echo "CREDENTIALS_GCP_NAME=${CREDENTIALS_GCP_NAME}" >> $GITHUB_ENV

    # Step 3: Export credentials to credentials.json
    - name: Set up Google Cloud credentials 2
      id: setup_credentials_2
      env: 
        GCP_CREDENTIALS: ${{ secrets[format('{0}', env.CREDENTIALS_GCP_NAME)] }}

      run: |
          echo "$GCP_CREDENTIALS" | jq . > credentials.json

    # Step 4: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
    - name: Export Google Application Credentials
      run: echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV

    # Step 5: Create Google Cloud bucket if it doesn't exist
    - name: Create GCS Bucket if Not Exists
      run: |
          gcloud auth activate-service-account --key-file=credentials.json
          gcloud config set project "${{ env.PROJECT_NAME }}"
          BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
          if ! gsutil ls -b "gs://$BUCKET_NAME" &>/dev/null; then
            gsutil mb "gs://$BUCKET_NAME"
          fi

    # Step 6: Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Step 7: Initialize the Terraform configuration
    - name: Terraform Init
      run: terraform init 

    # Step 8: Check conformity of Terraform configuration files
    - name: Terraform Validate
      run: terraform validate 

    # Step 9: Run Terraform Plan to check for infrastructure changes
    - name: Terraform Plan
      id: plan
      run: terraform plan 

  # terraform_apply:
  #   name: 'Terraform Apply'
  #   runs-on: ubuntu-latest
  #   needs: terraform_plan  # Ensure this job runs after the plan job
  #   environment: production

  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: terraform

  #   steps:
  #   # Step 1: Checkout the repository
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   # Step 2: Set up Google Cloud credentials based on project name
  #   - name: Set up Google Cloud credentials
  #     id: setup_credentials
  #     run: |
  #         CREDENTIALS_GCP_NAME=$(echo "$PROJECT_NAME" | sed 's/-/_/g')
  #         echo "${CREDENTIALS_GCP_NAME}=${CREDENTIALS_GCP_NAME}" >> $GITHUB_ENV
  #         echo "${{ secrets[env.CREDENTIALS_GCP_NAME] }}" > credentials.json

  #   # Step 3: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
  #   - name: Export Google Application Credentials
  #     run: echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV

  #   # Step 4: Install the latest version of Terraform CLI
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v1

  #   # Step 6: Initialize the Terraform configuration
  #   - name: Terraform Init
  #     run: terraform init

  #   # Step 7: Run Terraform Apply to deploy the configuration
  #   - name: Terraform Apply
  #     run: terraform apply --auto-approve