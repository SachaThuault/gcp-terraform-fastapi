name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      zone:
        description: 'Zone to deploy compute instances within your region'
        required: false
        default: 'b'
      fast_api_instance_compute_type:
        description: 'Size of the VM hosting fastAPI'
        required: false
        type: choice
        options:
          - 'e2-micro'
          - 'e2-small'
          - 'e2-medium'
          - 'e2-standard-2'
          - 'e2-standard-4'
          - 'e2-standard-8'
          - 'n2-standard-2'
          - 'n2-standard-4'
          - 'n2-standard-8'
          - 'n2-standard-16'
          - 'n2-highcpu-2'
          - 'n2-highcpu-4'
          - 'n2-highcpu-8'
          - 'n2-highcpu-16'
          - 'n1-standard-1'
          - 'n1-standard-2'
          - 'n1-standard-4'
          - 'n1-standard-8'
          - 'n1-standard-16'
          - 'n1-highcpu-2'
          - 'n1-highcpu-4'
          - 'n1-highcpu-8'
          - 'n1-highcpu-16'
        default: 'e2-medium'

env:
  PROJECT_NAME: ${{ github.ref_name }}
  ZONE: ${{ github.event.inputs.zone }}
  FAST_API_COMPUTE_TYPE: ${{ github.event.inputs.fast_api_instance_compute_type }}

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Step 1: Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    # Step 2: Set up Google Cloud credentials based on project name
    - name: Set up Google Cloud credentials
      id: setup_credentials
      run: |
          CREDENTIALS_GCP_NAME=$(echo "$PROJECT_NAME" | sed 's/-/_/g')
          echo "CREDENTIALS_GCP_NAME=${CREDENTIALS_GCP_NAME}" >> $GITHUB_ENV

    # Step 3: Export credentials to credentials.json
    - name: Export credentials to credentials.json
      id: export_credentials_json
      env: 
        GCP_CREDENTIALS: ${{ secrets[format('{0}', env.CREDENTIALS_GCP_NAME)] }}

      run: |
          echo "$GCP_CREDENTIALS" | jq . > credentials.json

    # Step 4: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
    - name: Export Google Application Credentials
      run: echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV

    # Step 5: Create Google Cloud bucket if it doesn't exist
    - name: Create Terraform GCS Bucket if Not Exists
      run: |
          gcloud auth activate-service-account --key-file=credentials.json
          gcloud config set project "${{ env.PROJECT_NAME }}"
          BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
          if ! gsutil ls -b "gs://$BUCKET_NAME" &>/dev/null; then
            gsutil mb "gs://$BUCKET_NAME"
          fi

    # Step 6: Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Step 7: Initialize the Terraform configuration
    - name: Terraform Init
      run: terraform init --backend-config="bucket=${{ env.PROJECT_NAME }}-terraform"

    # Step 8: Check conformity of Terraform configuration files
    - name: Terraform Validate
      run: terraform validate 

    # Step 9: Create context.tfvars file
    - name: Create context.tfvars
      run: |
        REGION=$(echo "${{ env.PROJECT_NAME }}" | cut -d '-' -f 3-4)
        ZONE="${REGION}-${{ env.ZONE }}"      

        cat <<EOF > context.tfvars
        project_id = "${{ env.PROJECT_NAME }}"
        region = "$REGION"
        zone = "$ZONE"
        tfstate_bucket_name = "${{ env.PROJECT_NAME }}-terraform"
        fast_api_instance_compute_type = "${{ env.FAST_API_COMPUTE_TYPE }}"
        EOF
    
    # Step 10: Export context.tfvars to the terraform GCS Bucket
    - name: Export context.tfvars to GCS terraform
      run: |
        BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
        gsutil cp context.tfvars "gs://$BUCKET_NAME/"

    # Step 11: Run Terraform Plan to check for infrastructure changes
    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file="context.tfvars"

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform_plan  # Ensure this job runs after the plan job

    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Step 1: Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    # Step 2: Set up Google Cloud credentials based on project name
    - name: Set up Google Cloud credentials
      id: setup_credentials
      run: |
          CREDENTIALS_GCP_NAME=$(echo "$PROJECT_NAME" | sed 's/-/_/g')
          echo "CREDENTIALS_GCP_NAME=${CREDENTIALS_GCP_NAME}" >> $GITHUB_ENV

    # Step 3: Export credentials to credentials.json
    - name: Export credentials to credentials.json
      id: export_credentials_json
      env: 
        GCP_CREDENTIALS: ${{ secrets[format('{0}', env.CREDENTIALS_GCP_NAME)] }}

      run: |
          echo "$GCP_CREDENTIALS" | jq . > credentials.json

    # Step 4: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
    - name: Export Google Application Credentials
      run: echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV

    # Step 7: Download context.tfvars from GCS
    - name: Download context.tfvars from GCS
      run: |
        gcloud auth activate-service-account --key-file=credentials.json
        gcloud config set project "${{ env.PROJECT_NAME }}"
        BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
        gsutil cp "gs://$BUCKET_NAME/context.tfvars" .

    # Step 5: Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Step 6: Initialize the Terraform configuration
    - name: Terraform Init
      run: terraform init --backend-config="bucket=${{ env.PROJECT_NAME }}-terraform"

    # Step 7: Run Terraform Apply to deploy the configuration
    - name: Terraform Apply with Retry
      uses: nick-fields/retry@v2.8.3
      with:
        timeout_minutes: 30
        retry_wait_seconds: 60
        max_attempts: 3
        command: |
          cd terraform
          terraform apply -auto-approve -var-file="context.tfvars"
        retry_on: error
        warning_on_retry: true
        continue_on_error: false

    # Step 9: Run Terraform Output
    - name: Terraform Output 
      id: terraform_output
      run: |
        echo "BastionTestNatIP=$(terraform output -raw bastion_instance_external_ip 2>/dev/null)" >> $GITHUB_ENV
        echo "BastionTestInstanceName=$(terraform output -raw bastion_instance_name 2>/dev/null)" >> $GITHUB_ENV
        echo "BucketTestBucketName=$(terraform output -raw bucket_data_name 2>/dev/null)" >> $GITHUB_ENV
        echo "CloudSQLTestInstanceName=$(terraform output -raw project_resource_name.sql_instance_name 2>/dev/null)" >> $GITHUB_ENV
        echo "FastApiTestIpAddress=$(terraform output bastion_instance_external_ip)" 
        echo "PrivateVMTestInstanceName=$(terraform output -raw fast_api_instance_name 2>/dev/null)" 
        echo "PrivateVMTestPrivateSubnetwork=https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_NAME }}/regions/${{ env.REGION }}/subnetworks/${{ env.PROJECT_NAME }}-private-subnet" >> $GITHUB_ENV

    # Step 10: Install Pester module
    - name: Install Pester Module
      run: |
        pwsh -Command "Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser"

    # Step 11: Run tests script with Terraform outputs and workflow variables
    - name: Run Tests
      run: |
        pwsh ./runTests.ps1 `
          -BastionTestNatIP ${{ env.BastionTestNatIP }} `
          -BastionTestPublicSubnetwork "https://www.googleapis.com/compute/v1/projects/${{ env.PROJECT_NAME }}/regions/${{ env.REGION }}/subnetworks/${{ env.PROJECT_NAME }}-public-subnet" `
          -BastionTestInstanceName ${{ env.BastionTestInstanceName }} `
          -BastionTestZone ${{ env.ZONE }} `
          -BucketTestBucketName ${{ env.BucketTestBucketName }} `
          -BucketTestTestFileName "testfile.txt" `
          -BucketTestFile1 "insert_sql_movies.py" `
          -BucketTestFile2 "main.py" `
          -BucketTestFile3 "movie.sql" `
          -CloudSQLTestPrivateNetwork "projects/${{ env.PROJECT_NAME }}/global/networks/${{ env.PROJECT_NAME }}-network" `
          -CloudSQLTestRegion ${{ env.REGION }} `
          -CloudSQLTestInstanceName ${{ env.CloudSQLTestInstanceName }} `
          -CloudSQLTestProjectId ${{ env.PROJECT_NAME }} `
          -FastApiTestIpAddress ${{ env.FastApiTestIpAddress }} `
          -PrivateVMTestNetworkIP "10.0.0.2" `
          -PrivateVMTestPrivateSubnetwork ${{ env.PrivateVMTestPrivateSubnetwork }} `
          -PrivateVMTestInstanceName ${{ env.PrivateVMTestInstanceName }} `
          -PrivateVMTestZone ${{ env.ZONE }}
