name: 'Destroy Infrastructure'

on:
  workflow_dispatch:

env:
  PROJECT_NAME: ${{ github.ref_name }}

jobs:
    terraform_destroy:
      name: 'Terraform Destroy'
      runs-on: ubuntu-latest
      environment: production

      defaults:
        run:
          shell: bash
          working-directory: terraform

      steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
        ref: ${{ github.ref_name }}

      # Step 2: Set up Google Cloud credentials based on project name
      - name: Set up Google Cloud credentials
        id: setup_credentials
        run: |
            CREDENTIALS_GCP_NAME=$(echo "$PROJECT_NAME" | sed 's/-/_/g')
            echo "CREDENTIALS_GCP_NAME=${CREDENTIALS_GCP_NAME}" >> $GITHUB_ENV

      # Step 3: Export credentials to credentials.json
      - name: Export credentials to credentials.json
        id: export_credentials_json
        env: 
          GCP_CREDENTIALS: ${{ secrets[format('{0}', env.CREDENTIALS_GCP_NAME)] }}

        run: |
            echo "$GCP_CREDENTIALS" | jq . > credentials.json

      # Step 4: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
      - name: Export Google Application Credentials
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=credentials.json" >> $GITHUB_ENV

      # Step 7: Download context.tfvars from GCS
      - name: Download context.tfvars from GCS
        run: |
          gcloud auth activate-service-account --key-file=credentials.json
          gcloud config set project "${{ env.PROJECT_NAME }}"
          BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
          gsutil cp "gs://$BUCKET_NAME/context.tfvars" .

      # Step 5: Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Step 6: Initialize the Terraform configuration
      - name: Terraform Init
        run: terraform init --backend-config="bucket=${{ env.PROJECT_NAME }}-terraform"

      # Step 7: Run Terraform destroy to destroy the infrastructure
      - name: Terraform Destroy with Retry
        uses: nick-fields/retry@v2.8.3
        with:
          timeout_minutes: 30
          retry_wait_seconds: 60
          max_attempts: 3
          command: |
            cd terraform
            terraform destroy -auto-approve -var-file="context.tfvars"
          retry_on: error
          warning_on_retry: true
          continue_on_error: false

      # Step 8: Delete terraform bucket
      - name: Delete Terraform GCS Bucket
        run: |
            gcloud auth activate-service-account --key-file=credentials.json
            gcloud config set project "${{ env.PROJECT_NAME }}"
            BUCKET_NAME="${{ env.PROJECT_NAME }}-terraform"
            gsutil -m rm -r gs://$BUCKET_NAME/**
            gsutil rb gs://$BUCKET_NAME